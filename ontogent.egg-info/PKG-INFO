Metadata-Version: 2.4
Name: ontogent
Version: 0.1.0
Summary: AI agent for finding suitable UBERON ontology terms
Author-email: Your Name <your.email@example.com>
License: MIT
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: anthropic>=0.6.0
Requires-Dist: langchain>=0.0.267
Requires-Dist: pydantic>=2.0.0
Requires-Dist: pytest>=7.3.1
Requires-Dist: requests>=2.31.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: ruff>=0.0.278
Dynamic: license-file

# Ontogent

## Project Overview

Ontogent is an AI-powered tool that helps researchers and scientists find the most suitable term in the UBERON ontology for their biological samples. The agent leverages Claude 3.5 (via Anthropic API) to process natural language descriptions and return precise UBERON terms.

UBERON (Uber-anatomy ontology) is a comprehensive cross-species anatomy ontology that covers anatomical structures in animals.

## Installation

### Prerequisites

- Python 3.9+
- Anthropic API key

### Setup with Conda (Recommended)

1. Make sure you have [Miniconda](https://docs.conda.io/en/latest/miniconda.html) or [Anaconda](https://www.anaconda.com/download/) installed.

2. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/ontogent.git
   cd ontogent
   ```

3. Create and activate the conda environment:
   ```bash
   # Create the environment
   ./setup_env.sh
   
   # Activate the environment
   conda activate ontogent
   
   # Install the package in development mode
   pip install -e .
   ```

4. Set up environment variables:
   ```bash
   export ANTHROPIC_API_KEY="your_api_key_here"
   ```

### Setup with Rye (Alternative)

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/ontogent.git
   cd ontogent
   ```

2. Set up virtual environment with Rye:
   ```bash
   rye sync
   ```

3. Set up environment variables:
   ```bash
   export ANTHROPIC_API_KEY="your_api_key_here"
   ```

## Usage

```python
from ontogent.src.services.agent import UberonAgent

# Initialize the agent
agent = UberonAgent()

# Query for a UBERON term
result = agent.find_term("liver tissue from a mouse embryo")
print(result)
```

## Development Guide

### Project Structure

```
ontogent/
├── src/
│   ├── models/      # Data models using Pydantic
│   ├── services/    # Core services (LLM, UBERON)
│   ├── utils/       # Helper functions
│   └── config.py    # Configuration management
├── tests/           # Unit tests
├── docs/            # Documentation
├── pyproject.toml   # Project configuration
└── README.md        # Project documentation
```

### Running Tests

```bash
pytest
```

## License

MIT
